<p>Subversion has a default Web UI that is served up by Apache if you run Subversion that way. It is pretty boring and read-only. Then there are things like <a href="http://websvn.tigris.org/">WebSVN</a> that make it less boring, but still read-only. I got curious about what it would take to make something even less boring and NOT read-only. Why not allow me to create a new repository on the server? Why not allow me to create a new default directory structure for a new project in a repository all through a web interface?</p>
<h3>Parent Path Setup</h3>
All of my repositories use the idea of the <a href="http://svnbook.red-bean.com/en/1.1/ch06s04.html">SVNParentPath</a>. This makes Apache assume that every directory under a given path is an SVN Repository. That structure makes it easy to deal with multiple repositories and secure them with a single security scheme. Using that assumption then it is easier to write  some code that will list existing repositories and create new ones in a known location.</p>
<h3>SvnAdmin With Ruby Subversion Bindings</h3>
Subversion provides language bindings for a number of different languages (Java, Python, Perl, PHP and Ruby) in addition to the native C libraries. Using these bindings it becomes fairly easy to deal with Subversion. The only hiccup will be dealing with the apparent lack of documentation for the code. So be prepared to do some exploration, digging and reading of the code.</p>
<p>I chose to try this using Ruby because it was quick and easy and it was a language I was already familiar with.</p>
<p>First you need to know how to create a new repository and open an existing repository. Fortunately those are simple, one-line operations:
<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Svn</span><span class="o">::</span><span class="no">Repos</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">repos_path</span><span class="p">,</span> <span class="p">{})</span>
<span class="n">repos</span> <span class="o">=</span> <span class="no">Svn</span><span class="o">::</span><span class="no">Repos</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">repos_path</span><span class="p">)</span></code></pre></figure></p>
<p>There was nothing special (from what I could tell) that would allow you to determine if a repository already existed, so I just created a simple function using the Ruby <em>File</em> operations to determine if a directory already existed. This code would allow me to determine if I needed to create new repository or open an existing one:
<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">repository_exists?</span><span class="p">(</span><span class="n">repos_path</span><span class="p">)</span>
   <span class="no">File</span><span class="p">.</span><span class="nf">directory?</span><span class="p">(</span><span class="n">repos_path</span><span class="p">)</span>
<span class="k">end</span></code></pre></figure></p>
<p>Now I have a repository open so I wanted to build a project structure using the default conventions I use for Subversions projects. My convention is to have a repository named after a client, the top-level directories are named for the client's project and then each project has the standard trunk, branches and tags within that. Depending on the kind of work you do that convention may or may not make sense for you.</p>
<p>With that decided, I created the code to write that structure in a repository. The one thing I found is that interacting with the Subversion repository allowed you to do things within a transaction that would force all of the changes to be recorded as a single commit. I thought this was a good thing, so performed these operations as a transaction:</p>
<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">txn</span> <span class="o">=</span> <span class="n">repos</span><span class="p">.</span><span class="nf">fs</span><span class="p">.</span><span class="nf">transaction</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;# create the top-level, project based directory
txn.root.make_dir(project_name)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="c1"># create the trunk, tags and branches for the new project</span>
<span class="sx">%w(trunk tags branches)</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
  <span class="n">txn</span><span class="p">.</span><span class="nf">root</span><span class="p">.</span><span class="nf">make_dir</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="n">project_name</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;repos.commit(txn)</span></code></pre></figure></p>
<p>Finally I put all of those things together into a class. The class had the concept of being initialized to a base Parent Path so all of the operations would know to start from that location:
<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">"svn/repos"</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;class SvnAdmin
   def initialize(parent_path)
     @base_path = parent_path
   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="c1"># Provides a list of directory entries. path must be a directory.</span>
   <span class="k">def</span> <span class="nf">ls</span><span class="p">(</span><span class="n">client_name</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="s2">"/"</span><span class="p">,</span> <span class="n">revision</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
     <span class="n">repos_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="vi">@base_path</span><span class="p">,</span> <span class="n">client_name</span><span class="p">)</span>
     <span class="n">repos</span> <span class="o">=</span> <span class="n">ensure_repository</span><span class="p">(</span><span class="n">repos_path</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;     entries = repos.fs.root(revision).dir_entries(path)
     entries.keys
   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">client_name</span><span class="p">,</span> <span class="n">project_name</span><span class="p">)</span>
     <span class="n">repos_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="vi">@base_path</span><span class="p">,</span> <span class="n">client_name</span><span class="p">)</span>
     <span class="n">repos</span> <span class="o">=</span> <span class="n">ensure_repository</span><span class="p">(</span><span class="n">repos_path</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;     txn = repos.fs.transaction
     txn.root.make_dir(project_name)
     %w(trunk tags branches).each do |dir|
       txn.root.make_dir("</span><span class="si">#{</span><span class="n">project_name</span><span class="si">}</span><span class="sr">/</span><span class="c1">#{dir}")</span>
     <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;     repos.commit(txn)
   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="kp">private</span>
   <span class="k">def</span> <span class="nf">ensure_repository</span><span class="p">(</span><span class="n">repos_path</span><span class="p">)</span>
     <span class="k">if</span> <span class="o">!</span> <span class="n">repository_exists?</span><span class="p">(</span><span class="n">repos_path</span><span class="p">)</span>
       <span class="no">Svn</span><span class="o">::</span><span class="no">Repos</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">repos_path</span><span class="p">,</span> <span class="p">{})</span>
     <span class="k">end</span>
     <span class="n">repos</span> <span class="o">=</span> <span class="no">Svn</span><span class="o">::</span><span class="no">Repos</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">repos_path</span><span class="p">)</span>
   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;   def repository_exists?(repos_path)
     File.directory?(repos_path)
   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span></code></pre></figure></p>
<h3>SvnAdmin from Rails</h3>
Now that I had some simple code to create new repositories or add a new project to an existing repository I decided to wrap it in a simple Rails application that would allow me to create repositories using a web-based interface.</p>
<p>To start with, I'm not going to use a database or any <em>ActiveRecord</em> classes in this project  (which you might do if you wanted authentication or something else) so I disabled ActiveRecord in the <em>config/environment.rb</em:
<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">config</span><span class="p">.</span><span class="nf">frameworks</span> <span class="o">-=</span> <span class="p">[</span> <span class="ss">:active_record</span> <span class="p">]</span></code></pre></figure></p>
<p>Then I created an <em>ReposController</em> to manage the Subversion repositories. This controller contains a couple of simple actions:</p>
<ol>
<li>An <em>index</em> action to list the existing repositories (directories)</li>
<li>A <em>new</em> action to display a form to enter the client and project names</li>
<li>A <em>create</em> action to use the SvnAdmin class to create a new repository and/or project</li>
</ol></p>
<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">"svnadmin"</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;class ReposController &lt; ApplicationController
  layout 'default'&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@dirs</span> <span class="o">=</span> <span class="no">Dir</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">SVN_PARENT_PATH</span><span class="p">).</span><span class="nf">entries</span><span class="p">.</span><span class="nf">sort</span><span class="p">.</span><span class="nf">reject</span> <span class="p">{</span><span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span> <span class="o">==</span> <span class="s2">"."</span> <span class="n">or</span> <span class="nb">p</span> <span class="o">==</span> <span class="s2">".."</span><span class="p">}</span>
  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;  def new
  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">create</span>
    <span class="n">svn</span> <span class="o">=</span> <span class="no">SvnAdmin</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">SVN_PARENT_PATH</span><span class="p">)</span>
    <span class="n">repos</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:repos</span><span class="p">]</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;    respond_to do |format|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>      <span class="k">begin</span>
        <span class="n">svn</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">repos</span><span class="p">[</span><span class="ss">:client_name</span><span class="p">],</span> <span class="n">repos</span><span class="p">[</span><span class="ss">:project_name</span><span class="p">])</span>
        <span class="n">flash</span><span class="p">[</span><span class="ss">:notice</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Successfully created."</span>
        <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">"index"</span> <span class="p">}</span>
        <span class="nb">format</span><span class="p">.</span><span class="nf">xml</span>  <span class="p">{</span> <span class="n">head</span> <span class="ss">:ok</span> <span class="p">}</span>
      <span class="k">rescue</span>
        <span class="n">flash</span><span class="p">[</span><span class="ss">:error</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Failed to create structure."</span>
        <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">"index"</span> <span class="p">}</span>
        <span class="nb">format</span><span class="p">.</span><span class="nf">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">:xml</span> <span class="o">=&gt;</span> <span class="n">object</span><span class="p">.</span><span class="nf">errors</span><span class="p">,</span> <span class="ss">:status</span> <span class="o">=&gt;</span> <span class="ss">:unprocessable_entity</span> <span class="p">}</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure></p>
<p>You can also easily create a route and a <em>ProjectsController</em> that allows you to see all of the projects within a repository.</p>
<p>The route in <em>config/routes.rb</em> is simply:
<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="n">map</span><span class="p">.</span><span class="nf">connect</span> <span class="s1">':repos/projects/'</span><span class="p">,</span>
      <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s1">'projects'</span><span class="p">,</span>
      <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">'index'</span></code></pre></figure></p>
<p>And the <em>ProjectsController</em> looks up the <em>:repos</em> param to open the proper repository and list the top-level directories with it:
<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">"svnadmin"</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;class ProjectsController &lt; ApplicationController
  layout 'default'&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">index</span>
    <span class="n">repos_path</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:repos</span><span class="p">]</span>
    <span class="n">svn</span> <span class="o">=</span> <span class="no">SvnAdmin</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">SVN_PARENT_PATH</span><span class="p">)</span>
    <span class="vi">@projects</span> <span class="o">=</span> <span class="n">svn</span><span class="p">.</span><span class="nf">ls</span><span class="p">(</span><span class="n">repos_path</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure></p>
<p>Hopefully that will help you handle your Subversion administration. It should let you code up your conventions so that they are followed whenever a new repository is created or a new project is started.</p>
