<p>Buzzword alert! Buzzword alert! Synergisticly expedite transparent web-readiness! Buzzword alert! Buzzword alert!</p>
<p>Ok, now that I've got that out of the way...</p>
<p>Ajax is a web application development architecture that resembles more of a client-server architecture than traditional web development. In an Ajax application a client application is delivered to the browser consisting of HTML, CSS and JavaScript. The interactions of the client with the server send and receive data, data that the client then knows how to display to the user.</p>
<p>While Ajax has an 'X' which stands for XML in its name, Ajax really has nothing to do with XML at its core. In reality parsing XML is usually a lot more work than you need to do when you expect that a client will be a browser. Along comes JSON. JavaScript Object Notation is a structured format that corresponds to the needs of the client-side programming environment: JavaScript. JSON can be evaluated on the client into JavaScript object graphs, no parsing, no XML Sax or DOM parsing, just eval() into a JavaScript object and then call methods on it.</p>
<p>Ajax, as a hot technology, I was of course interested in learning more so I created a small example application that I could build and play with a bit. I thought I'd share it with everyone so they could use it as a quick-start example for trying some of these technologies.</p>
<p>I chose to use the <a href="http://www.dojotoolkit.org">DOJO Toolkit</a> as my client-side framework because it seems to have a very broad library already built and a reasonable amount of documentation. DOJO is really engineered like a true software application. It really shows off the fact that you can write good code and good frameworks using the JavaScript language.</p>
<h2>Show Me Some Code</h2>
Here's an example of a simple blog application that talks to a single table to display articles.</p>
<h3>showArticle.html</h3>
A very simple HTML skeleton that imports the CSS, DOJO and the Application written in JavaScript.
<figure class="highlight"><pre><code class="language-xhtml" data-lang="xhtml">&lt;html&gt;
&lt;head&gt;&lt;/p&gt;
&lt;link rel="stylesheet" type="text/css" href="blog.css" /&gt;
	&lt;script type="text/javascript" src="dojo.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript" src="blog.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;&lt;/p&gt;
&lt;div id="header"&gt;Blog&lt;/div&gt;&lt;/p&gt;
&lt;ul id="articleList"&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;div id="article"&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></figure></p>
<h3>blog.js</h3>
The Application that is delivered to the Client.</p>
<p>getArticle() is called and initiates an asynchronous call to the getArticle.php code. When the response comes back DOJO automatically calls the showArticle() function and passes the response data to it. The showArticle() function handles formatting the data by manipulating the HTML DOM of the page.</p>
<p><figure class="highlight"><pre><code class="language-php" data-lang="php">dojo.require("dojo.event.*");
dojo.require("dojo.io.*");
dojo.require("dojo.date.*");
dojo.require("dojo.lfx.*");
function getArticle(id) {
	var idStr = "{\"id\":" + id + "}";
	request = {'action' : 'getArticle', 'data' : idStr};
	dojo.io.bind({
    	url: "getArticle.php",
    	handler: showArticle,
    	mimetype: "text/json",
		content: request
	});
}
function showArticle(type, data, evt) {
	dojo.dom.removeChildren(dojo.byId('article'));
	appendArticlePart('title', data.title);
	var date = dojo.date.fromSql(data.time);
	appendArticlePart('time', dojo.date.toRelativeString(date));
	appendArticlePart('content', data.content);
	dojo.lfx.highlight(dojo.byId('article'), dojo.lfx.Color);
}
function appendArticlePart(id, value) {
	var element = document.createElement("div");
	element.id=id;
	element.innerHTML=value;
	dojo.byId('article').appendChild(element);
}</code></pre></figure></p>
<h3>getArticle.php</h3>
The code that lives on the server and responds to a given service request. This PHP code parses the HTTP request that the DOJO toolkit sends to the server. It parses the data from a JSON string into PHP objects, calls into the database and gets some values out. It then turns a PHP array into a JSON string to return to the web client.
<figure class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nb">header</span><span class="p">(</span><span class="s1">'Content-type: text/json'</span><span class="p">);</span>
<span class="nv">$action</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">"action"</span><span class="p">];</span>
<span class="nv">$data</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="s2">"data"</span><span class="p">];</span>
<span class="nv">$data</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s2">"</span><span class="se">\\\"</span><span class="s2">"</span><span class="p">,</span><span class="s2">"</span><span class="se">\"</span><span class="s2">"</span><span class="p">,</span><span class="nv">$data</span><span class="p">);</span>
<span class="k">require_once</span><span class="p">(</span><span class="s1">'JSON.php'</span><span class="p">);</span>
<span class="nv">$json</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">services_JSON</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span> <span class="nv">$action</span> <span class="o">==</span> <span class="s2">"getArticle"</span><span class="p">)</span> <span class="p">{</span>
	<span class="nv">$jsonArray</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="na">decode</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
	<span class="nv">$article</span> <span class="o">=</span> <span class="nx">getArticle</span><span class="p">(</span><span class="nv">$jsonArray</span><span class="p">);</span>
	<span class="k">print</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="na">encode</span><span class="p">(</span><span class="nv">$article</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">function</span> <span class="nf">getArticle</span><span class="p">(</span><span class="nv">$node</span><span class="p">)</span> <span class="p">{</span>
	<span class="nv">$result</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
	<span class="nv">$link</span> <span class="o">=</span> <span class="nx">connect_db</span><span class="p">();</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$link</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s2">"select id, title, publish_time, content from articles where id=?"</span><span class="p">))</span> <span class="p">{</span>
		<span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">bind_param</span><span class="p">(</span><span class="s2">"i"</span><span class="p">,</span> <span class="nb">intval</span><span class="p">(</span><span class="nv">$node</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">));</span>
		<span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
		<span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">bind_result</span><span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="nv">$title</span><span class="p">,</span> <span class="nv">$time</span><span class="p">,</span> <span class="nv">$content</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">())</span> <span class="p">{</span>
			<span class="nv">$result</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
				<span class="s2">"id"</span><span class="o">=&gt;</span> <span class="nv">$id</span><span class="p">,</span>
				<span class="s2">"title"</span> <span class="o">=&gt;</span> <span class="nv">$title</span><span class="p">,</span>
				<span class="s2">"time"</span> <span class="o">=&gt;</span> <span class="nv">$time</span><span class="p">,</span>
				<span class="s2">"content"</span> <span class="o">=&gt;</span> <span class="nv">$content</span><span class="p">,</span>
				<span class="s2">"objectId"</span><span class="o">=&gt;</span> <span class="s2">"article"</span>
				<span class="p">);</span>
			<span class="p">}</span>
			<span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">close</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="nv">$link</span><span class="o">-&gt;</span><span class="na">close</span><span class="p">();</span>
		<span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
	<span class="p">}</span>
<span class="k">function</span> <span class="nf">connect_db</span><span class="p">()</span> <span class="p">{</span>
	<span class="nv">$mysqli</span> <span class="o">=</span>  <span class="k">new</span> <span class="nx">mysqli</span><span class="p">(</span><span class="s2">"localhost"</span><span class="p">,</span> <span class="s2">"root"</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">"blog"</span><span class="p">);</span>
	<span class="cm">/* check connection */</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">mysqli_connect_errno</span><span class="p">())</span> <span class="p">{</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s2">"Connect failed: %s</span><span class="se">\n</span><span class="s2">"</span><span class="p">,</span> <span class="nx">mysqli_connect_error</span><span class="p">());</span>
		<span class="k">exit</span><span class="p">();</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nv">$mysqli</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">?&gt;</span></code></pre></figure></p>
<p>While this example is written in PHP, there is nothing that would prevent you from writing the server component in any language. There are JSON libraries for every language you've ever heard of (and a lot that you've never even heard of). The notation itself is fairly simple (it's about 700 lines of code in PHP), so implementing it in another language should be relatively easy as well.</p>
<p>Consider using implementation neutral URIs for your service calls and then using something like Apache mod-rewrite to map those URIs to the proper calls in whatever language you use to implement the server code. Doing this and you should be able to completely decouple your web client from the server components.</p>
<h2>Resources</h2>
<a href="http://en.wikipedia.org/wiki/Ajax_(programming)">Ajax</a>
<a href="http://json.org">JSON</a>
<a href="http://www.php.net">PHP</a>
<a href="http://www.dojotoolkit.org">DOJO Toolkit</a>
<a href="http://mike.teczno.com/json.html">JSON-PHP</a>
<a href="http://www.aurore.net/projects/php-json/">PHP-JSON</a>
<a href="http://www.amazon.com/gp/product/0596516487?ie=UTF8&tag=zorchednet-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0596516487">Dojo: The Definitive Guide</a><img src="http://www.assoc-amazon.com/e/ir?t=zorchednet-20&l=as2&o=1&a=0596516487" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<a href="http://www.amazon.com/gp/product/1934356115?ie=UTF8&tag=zorchednet-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1934356115">Mastering Dojo: JavaScript and Ajax Tools for Great Web Experiences (Pragmatic Programmers)</a><img src="http://www.assoc-amazon.com/e/ir?t=zorchednet-20&l=as2&o=1&a=1934356115" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>
