<p>Sometimes you need a quick-and-dirty tool to get something done. You're not looking for a long-term solution, but rather just have a simple job to do. As a programmer when you have those thoughts you naturally migrate toward scripting languages. But sometimes that throw away tool also needs to do highly parallel operations with good performance characteristics. Until recently it seemed like you only got to choose one or the other though. And then came <a href="http://golang.org/">Go</a>.</p></p>
<h2>A Use Case</h2></p>
<p>We've been working on an application that provides APIs for other apps. Those APIs are required to be fast and to scale up to many concurrent users. We needed a way to push a lot of traffic to this API while ensuring that the API would access a wide swath of the data in the database. We didn't want to run into the case where the same request was being made over and over allowing the database to end up with an unrealistic scenario where it had all the data cached. There are a number of existing tools for this kind of performance testing, but seeing some of the tests run didn't give us much confidence that they were really running these requests in parallel like we needed. We also wanted to be able to easily run these tests from many different clients computers at once so that we could ensure that the client computers and internet connections were not the bottleneck.</p></p>
<h2>How Does Go Fit That Use Case?</h2></p>
<h3>Write-Once (Compile a Few Times) and Run Anywhere</h3></p>
<p>One of the advantages of Go is that it is easy to cross-compile it to other architectures and operating systems. This property made it easy to write a little application that we could run at the same time on Mac OS and Linux. Just like a scripting language it was write-once and run anywhere. Of course we had to compile it for each of the different operating systems but that is incredibly easy with Go. Unlike most scripting languages, once a Go binary is compiled for an OS, nothing else needs to be installed to run it. There's no management of different versions or libraries. A Go binary is entirely self-contained so no extra Go runtime is needed to be installed for the application to be run and all of the depencies are statically linked in. Simply copy the binary to the appropriate machine and execute it. You can't get much simpler than that.</p></p>
<pre>
$ brew install go --cross-compile-common
$ GOOS=linux go build myapp.go
</pre></p>
<h3>Libraries for All The Things</h3></p>
<p>Go has a large number of <a href="http://golang.org/pkg/">good libraries</a> that come standard. These libraries include support for making HTTP clients and servers. There's support for accessing databases (although the drivers themselves are not included). It includes support for parsing command line arguments, encoding and decoding JSON, for doing cryptography, and for using regular expressions. Basically it includes a lot of libraries that you need for creating applications whether it's something you want to maintain forever or whether it's a throw away app.</p></p>
<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="n">flag</span><span class="o">.</span><span class="n">BoolVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">help</span><span class="p">,</span><span class="x"> </span><span class="s">"h"</span><span class="p">,</span><span class="x"> </span><span class="no">false</span><span class="p">,</span><span class="x"> </span><span class="s">"help"</span><span class="p">)</span><span class="x">
</span><span class="n">resp</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">http</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="s">"http://example.com/"</span><span class="p">)</span><span class="x">
</span><span class="k">var</span><span class="x"> </span><span class="n">exampleResp</span><span class="x"> </span><span class="n">MyJsonResponse</span><span class="x">
</span><span class="n">decoder</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">json</span><span class="o">.</span><span class="n">NewDecoder</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="p">)</span><span class="x">
</span><span class="n">err</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">decoder</span><span class="o">.</span><span class="n">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">exampleResp</span><span class="p">)</span></code></pre></figure>
<h3>Concurrent Design and Parallel Execution</h3></p>
<p>Goroutines allow a program to execute a function concurrently with other running code. Channels allow for different goroutines to communicate by passing messages to each other. Those two things together allow for a simple means of structuring code with a concurrent design.</p></p>
<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="n">ch</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="nb">make</span><span class="p">(</span><span class="k">chan</span><span class="x"> </span><span class="kt">int</span><span class="p">)</span><span class="x">
</span><span class="k">go</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">for</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">val</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&lt;-</span><span class="n">ch</span><span class="x">
    </span><span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Got an int: %v"</span><span class="p">,</span><span class="x"> </span><span class="n">val</span><span class="p">)</span><span class="x">
  </span><span class="p">}</span><span class="x">
</span><span class="p">}()</span><span class="x">
</span><span class="n">ch</span><span class="x"> </span><span class="o">&lt;-</span><span class="x"> </span><span class="m">1</span><span class="x">
</span><span class="n">ch</span><span class="x"> </span><span class="o">&lt;-</span><span class="x"> </span><span class="m">2</span></code></pre></figure>
<p>In addition to having easy mechanisms to implement a concurrent design, your program also needs to be able to do actual work in parallel. Go can run many different goroutines in parallel and gives you control over how many run at the same time with a simple function call.</p></p>
<pre><code>runtime.GOMAXPROCS(25)</code></pre>

<h2>Put The Pieces Together</h2></p>
<p>Bringing together those libraries and a concurrent design allows us to easily create a program that meets our needs for testing these APIs.</p></p>
<p>This is a simple application that does GET requests to a specific URL. The program allows you to specify the URL, the number of requests to make, and the number to run concurrently. It uses many of the libraries I mentioned above for handling HTTP, for parsing command line arguments, for calcuating the duration of requests, etc. It also uses goroutines to allow for multiple simultaneous requests to be made while using a channel to communicate the results back to the main program.</p></p>
<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span><span class="x"> </span><span class="n">main</span><span class="x">
</span><span class="k">import</span><span class="x"> </span><span class="p">(</span><span class="x">
  </span><span class="s">"flag"</span><span class="x">
  </span><span class="s">"fmt"</span><span class="x">
  </span><span class="s">"io/ioutil"</span><span class="x">
  </span><span class="s">"net/http"</span><span class="x">
  </span><span class="s">"runtime"</span><span class="x">
  </span><span class="s">"sync"</span><span class="x">
  </span><span class="s">"time"</span><span class="x">
</span><span class="p">)</span><span class="x">
</span><span class="k">var</span><span class="x"> </span><span class="n">help</span><span class="x"> </span><span class="kt">bool</span><span class="x">
</span><span class="k">var</span><span class="x"> </span><span class="n">count</span><span class="x"> </span><span class="kt">int</span><span class="x">
</span><span class="k">var</span><span class="x"> </span><span class="n">concurrent</span><span class="x"> </span><span class="kt">int</span><span class="x">
</span><span class="k">var</span><span class="x"> </span><span class="n">url</span><span class="x"> </span><span class="kt">string</span><span class="x">
</span><span class="k">var</span><span class="x"> </span><span class="n">client</span><span class="x"> </span><span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Client</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">init</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">client</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">http</span><span class="o">.</span><span class="n">Client</span><span class="p">{}</span><span class="x">
  </span><span class="n">flag</span><span class="o">.</span><span class="n">BoolVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">help</span><span class="p">,</span><span class="x"> </span><span class="s">"h"</span><span class="p">,</span><span class="x"> </span><span class="no">false</span><span class="p">,</span><span class="x"> </span><span class="s">"help"</span><span class="p">)</span><span class="x">
  </span><span class="n">flag</span><span class="o">.</span><span class="n">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">count</span><span class="p">,</span><span class="x"> </span><span class="s">"n"</span><span class="p">,</span><span class="x"> </span><span class="m">1000</span><span class="p">,</span><span class="x"> </span><span class="s">"number of requests"</span><span class="p">)</span><span class="x">
  </span><span class="n">flag</span><span class="o">.</span><span class="n">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">concurrent</span><span class="p">,</span><span class="x"> </span><span class="s">"c"</span><span class="p">,</span><span class="x"> </span><span class="n">runtime</span><span class="o">.</span><span class="n">NumCPU</span><span class="p">()</span><span class="x"> </span><span class="o">+</span><span class="x"> </span><span class="m">1</span><span class="p">,</span><span class="x"> </span><span class="s">"number of concurrent requests"</span><span class="p">)</span><span class="x">
  </span><span class="n">flag</span><span class="o">.</span><span class="n">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">url</span><span class="p">,</span><span class="x"> </span><span class="s">"u"</span><span class="p">,</span><span class="x"> </span><span class="s">"http://127.0.0.1:5000/"</span><span class="p">,</span><span class="x"> </span><span class="s">"url"</span><span class="p">)</span><span class="x">
  </span><span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span><span class="x">
</span><span class="p">}</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">main</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">if</span><span class="x"> </span><span class="n">help</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">flag</span><span class="o">.</span><span class="n">Usage</span><span class="p">()</span><span class="x">
    </span><span class="k">return</span><span class="x">
  </span><span class="p">}</span><span class="x">
  </span><span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Concurrent: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="x"> </span><span class="n">concurrent</span><span class="p">)</span><span class="x">
  </span><span class="n">runtime</span><span class="o">.</span><span class="n">GOMAXPROCS</span><span class="p">(</span><span class="n">concurrent</span><span class="x"> </span><span class="o">+</span><span class="x"> </span><span class="m">2</span><span class="p">)</span><span class="x">
  </span><span class="n">runChan</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="nb">make</span><span class="p">(</span><span class="k">chan</span><span class="x"> </span><span class="kt">int</span><span class="p">,</span><span class="x"> </span><span class="n">concurrent</span><span class="p">)</span><span class="x">
  </span><span class="n">resultChan</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="nb">make</span><span class="p">(</span><span class="k">chan</span><span class="x"> </span><span class="n">Result</span><span class="p">)</span><span class="x">
  </span><span class="k">var</span><span class="x"> </span><span class="n">wg</span><span class="x"> </span><span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span><span class="x">
  </span><span class="n">success_cnt</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="x">
  </span><span class="n">failure_cnt</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="x">
  </span><span class="k">var</span><span class="x"> </span><span class="n">durations</span><span class="x"> </span><span class="p">[]</span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x">
  </span><span class="k">var</span><span class="x"> </span><span class="n">min_dur</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x">
  </span><span class="k">var</span><span class="x"> </span><span class="n">max_dur</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x">
  </span><span class="c">// Run the stuff</span><span class="x">
  </span><span class="n">dur</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">duration</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="c">// setup to handle responses</span><span class="x">
    </span><span class="k">go</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
      </span><span class="k">for</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="n">r</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&lt;-</span><span class="n">resultChan</span><span class="x">
        </span><span class="n">durations</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="nb">append</span><span class="p">(</span><span class="n">durations</span><span class="p">,</span><span class="x"> </span><span class="n">r</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span><span class="x">
        </span><span class="n">min_dur</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">min</span><span class="p">(</span><span class="n">min_dur</span><span class="p">,</span><span class="x"> </span><span class="n">r</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span><span class="x">
        </span><span class="n">max_dur</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">max</span><span class="p">(</span><span class="n">max_dur</span><span class="p">,</span><span class="x"> </span><span class="n">r</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span><span class="x">
        </span><span class="c">// 200s and 300s are success in HTTP</span><span class="x">
        </span><span class="k">if</span><span class="x"> </span><span class="n">r</span><span class="o">.</span><span class="n">StatusCode</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="m">400</span><span class="x"> </span><span class="p">{</span><span class="x">
          </span><span class="n">success_cnt</span><span class="x"> </span><span class="o">+=</span><span class="x"> </span><span class="m">1</span><span class="x">
        </span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
          </span><span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Error: %v; %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="x"> </span><span class="n">r</span><span class="o">.</span><span class="n">StatusCode</span><span class="p">,</span><span class="x"> </span><span class="n">r</span><span class="o">.</span><span class="n">ErrOrBody</span><span class="p">())</span><span class="x">
          </span><span class="n">failure_cnt</span><span class="x"> </span><span class="o">+=</span><span class="x"> </span><span class="m">1</span><span class="x">
        </span><span class="p">}</span><span class="x">
        </span><span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="x">
      </span><span class="p">}</span><span class="x">
    </span><span class="p">}()</span><span class="x">
    </span><span class="c">// setup to handle running requests</span><span class="x">
    </span><span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">count</span><span class="p">)</span><span class="x">
    </span><span class="k">go</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
      </span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="o">:=</span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">count</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="o">&lt;-</span><span class="n">runChan</span><span class="x">
        </span><span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"."</span><span class="p">)</span><span class="x">
        </span><span class="k">go</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
          </span><span class="n">resultChan</span><span class="x"> </span><span class="o">&lt;-</span><span class="x"> </span><span class="n">Execute</span><span class="p">()</span><span class="x">
          </span><span class="n">runChan</span><span class="x"> </span><span class="o">&lt;-</span><span class="x"> </span><span class="m">1</span><span class="x">
        </span><span class="p">}()</span><span class="x">
      </span><span class="p">}</span><span class="x">
    </span><span class="p">}()</span><span class="x">
    </span><span class="c">// tell N number of requests to run, but this limits the concurrency</span><span class="x">
    </span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">concurrent</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">
      </span><span class="n">runChan</span><span class="x"> </span><span class="o">&lt;-</span><span class="x"> </span><span class="m">1</span><span class="x">
    </span><span class="p">}</span><span class="x">
    </span><span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span><span class="x">
  </span><span class="p">})</span><span class="x">
  </span><span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span><span class="x">
  </span><span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Success: %v</span><span class="se">\n</span><span class="s">Failure: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="x"> </span><span class="n">success_cnt</span><span class="p">,</span><span class="x"> </span><span class="n">failure_cnt</span><span class="p">)</span><span class="x">
  </span><span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Min: %v</span><span class="se">\n</span><span class="s">Max: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="x"> </span><span class="n">min_dur</span><span class="p">,</span><span class="x"> </span><span class="n">max_dur</span><span class="p">)</span><span class="x">
  </span><span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Mean: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="x"> </span><span class="n">avg</span><span class="p">(</span><span class="n">durations</span><span class="p">))</span><span class="x">
  </span><span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Elapsed time: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="x"> </span><span class="n">dur</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span><span class="x">
</span><span class="p">}</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">avg</span><span class="p">(</span><span class="n">durs</span><span class="x"> </span><span class="p">[]</span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">total</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="kt">float64</span><span class="p">(</span><span class="m">0</span><span class="p">)</span><span class="x">
  </span><span class="k">for</span><span class="x"> </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">d</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="k">range</span><span class="x"> </span><span class="n">durs</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">total</span><span class="x"> </span><span class="o">+=</span><span class="x"> </span><span class="n">d</span><span class="o">.</span><span class="n">Seconds</span><span class="p">()</span><span class="x">
  </span><span class="p">}</span><span class="x">
  </span><span class="k">return</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">((</span><span class="n">total</span><span class="x"> </span><span class="o">/</span><span class="x"> </span><span class="kt">float64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">durs</span><span class="p">)))</span><span class="x"> </span><span class="o">*</span><span class="x"> </span><span class="kt">float64</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">))</span><span class="x">
</span><span class="p">}</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">min</span><span class="p">(</span><span class="n">a</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">,</span><span class="x"> </span><span class="n">b</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">if</span><span class="x"> </span><span class="n">a</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="m">0</span><span class="x"> </span><span class="o">&amp;&amp;</span><span class="x"> </span><span class="n">a</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">b</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">a</span><span class="x">
  </span><span class="p">}</span><span class="x">
  </span><span class="k">return</span><span class="x"> </span><span class="n">b</span><span class="x">
</span><span class="p">}</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">max</span><span class="p">(</span><span class="n">a</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">,</span><span class="x"> </span><span class="n">b</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">if</span><span class="x"> </span><span class="n">a</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="n">b</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">a</span><span class="x">
  </span><span class="p">}</span><span class="x">
  </span><span class="k">return</span><span class="x"> </span><span class="n">b</span><span class="x">
</span><span class="p">}</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">Execute</span><span class="p">()</span><span class="x"> </span><span class="n">Result</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">var</span><span class="x"> </span><span class="n">resp</span><span class="x"> </span><span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Response</span><span class="x">
  </span><span class="k">var</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="kt">error</span><span class="x">
  </span><span class="n">dur</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">duration</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">resp</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">http</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="x">
  </span><span class="p">})</span><span class="x">
  </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">Result</span><span class="p">{</span><span class="n">dur</span><span class="p">,</span><span class="x"> </span><span class="o">-</span><span class="m">1</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">,</span><span class="x"> </span><span class="s">""</span><span class="p">}</span><span class="x">
  </span><span class="p">}</span><span class="x">
  </span><span class="k">defer</span><span class="x"> </span><span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span><span class="x">
  </span><span class="k">var</span><span class="x"> </span><span class="n">body</span><span class="x"> </span><span class="kt">string</span><span class="x">
  </span><span class="k">if</span><span class="x"> </span><span class="n">b</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">ioutil</span><span class="o">.</span><span class="n">ReadAll</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="p">);</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">body</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="kt">string</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="x">
  </span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">body</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="s">""</span><span class="x">
  </span><span class="p">}</span><span class="x">
  </span><span class="k">return</span><span class="x"> </span><span class="n">Result</span><span class="p">{</span><span class="n">dur</span><span class="p">,</span><span class="x"> </span><span class="n">resp</span><span class="o">.</span><span class="n">StatusCode</span><span class="p">,</span><span class="x"> </span><span class="no">nil</span><span class="p">,</span><span class="x"> </span><span class="n">body</span><span class="p">}</span><span class="x">
</span><span class="p">}</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">Result</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">Duration</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x">
  </span><span class="n">StatusCode</span><span class="x"> </span><span class="kt">int</span><span class="x">
  </span><span class="n">Err</span><span class="x"> </span><span class="kt">error</span><span class="x">
  </span><span class="n">Body</span><span class="x"> </span><span class="kt">string</span><span class="x">
</span><span class="p">}</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">r</span><span class="x"> </span><span class="o">*</span><span class="n">Result</span><span class="p">)</span><span class="x"> </span><span class="n">ErrOrBody</span><span class="p">()</span><span class="x"> </span><span class="kt">string</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">if</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="n">r</span><span class="o">.</span><span class="n">Err</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">r</span><span class="o">.</span><span class="n">Err</span><span class="o">.</span><span class="n">Error</span><span class="p">()</span><span class="x">
  </span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">r</span><span class="o">.</span><span class="n">Body</span><span class="x">
  </span><span class="p">}</span><span class="x">
</span><span class="p">}</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">duration</span><span class="p">(</span><span class="n">f</span><span class="x"> </span><span class="k">func</span><span class="p">())</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">start</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="x">
  </span><span class="n">f</span><span class="p">()</span><span class="x">
  </span><span class="k">return</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Sub</span><span class="p">(</span><span class="n">start</span><span class="p">)</span><span class="x">
</span><span class="p">}</span></code></pre></figure>
<p>The app we wrote started out a lot like this; easy and straightforward. As we needed to add more tests we stated refactoring out types to allow me to separate the core of the load testing and calculation of times from the actual requests run. Go provides function type aliases, higher order functions and a lot of other abstractions which make those refactorings quite elegant. But that's for a different post...</p></p>
