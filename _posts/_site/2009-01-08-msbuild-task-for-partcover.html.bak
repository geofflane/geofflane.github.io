<p><strong><em><![Rant[</em></strong></p>
<p>I continue to lament the dearth of option for Test Coverage in the .NET world.</p>
<p>In the Java world you have open source tools like <a href="http://emma.sourceforge.net/">Emma</a> and <a href="http://cobertura.sourceforge.net/">Cobertura</a> that are widely used and supported (and <a href="http://java-source.net/open-source/code-coverage">many more</a>) as well as proprietary tools like <a href="http://www.atlassian.com/software/clover/">Clover</a> available.</p>
<p>.NET we have an open source <a href="http://sourceforge.net/projects/ncover/">NCover SF</a> that requires you to do odd code instrumentation and is essentially dead it seams, another <a href="http://www.ncover.com">NCover</a> which is proprietary and costs money and <a href="http://sourceforge.net/projects/partcover/">PartCover</a> which is open source, but doesn't seem real active.</p>
<p>Don't get me wrong, NCover.org is a good option if you are willing to spend the money for it. But with a team of 30+ and a CI server, I'm not sure if I want to drop $10k on it. <em>(NCover up until version 1.5.8 was Free Software (GPL) before it was closed. Who has the source and why haven't you forked it yet?)</em></p>
<p><strong><em>]]></em></strong></p>
<p>If you're not willing to pay that basically leaves PartCover. But of course you want to integrate your code coverage with your automated build. There was no support for MSBuild out of the box, so I decided to build it.</p>
<h3>Creating an MSBuild Task</h3>
I need to do 2 things to run PartCover:</p>
<ol>
<li>Register the native <em>PartCover.CorDriver.dll</em></li>
<li>Execute the PartCover.exe with the proper options</li>
</ol></p>
<h4>Register Native DLL</h4>
To see the details on how to register a native DLL using .NET code so my earlier post <a href="http://www.zorched.net/2009/01/01/register-and-unregister-com-dll-from-net-code/">Register and Unregister COM DLL from .NET Code</a>.</p>
<h4>Execute PartCover</h4>
The MSBuild framework provides a <a href="http://msdn.microsoft.com/en-us/library/microsoft.build.utilities.tooltask.aspx">ToolTask</a> base class whose whole purpose is for executing external command line tools. I used this as the base of the task.</p>
<h5>1. ToolName</h5>
First you override the <em>ToolName</em> property to return the name of the EXE to run. Nothing special here, it's just the executable name.</p>
<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">protected</span> <span class="k">override</span> <span class="kt">string</span> <span class="n">ToolName</span>
<span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="s">"PartCover.exe"</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure></p>
<h5>2. Properties</h5>
Next to start build the task you go about defining all of the settings that a user will need to set to execute the task. You then create those as Properties on the class and they will be set by MSBuild. Start with the simple things that someone will need to pass to get the tool to execute properly. You can build from there for other properties. If possible give the properties sane defaults so that people don't have to override them in their build file.</p>
<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// ...
/// &lt;summary&gt;
/// The application to execute to get the coverage results.
/// Generally this will be your unit testing exe.
/// &lt;/summary&gt;
</span><span class="k">public</span> <span class="kt">string</span> <span class="n">Target</span>
<span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_target</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span> <span class="n">_target</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// &lt;summary&gt;
/// The arguments to pass to the &lt;see cref="Target"/&gt; executable
/// &lt;/summary&gt;
</span><span class="k">public</span> <span class="kt">string</span> <span class="n">TargetArgs</span>
<span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_targetArgs</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span> <span class="n">_targetArgs</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="kt">string</span> <span class="n">WorkingDirectory</span>
<span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_workingDirectory</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span> <span class="n">_workingDirectory</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
<span class="p">//</span> <span class="p">...</span></code></pre></figure></p>
<h5>3. Command Arguments</h5>
Then you need to override <em>string GenerateCommandLineCommands()</em> method. The whole purpose of this method is to construct any command line parameters that need to be passed to the <em> ToolName</em> command using the Properties defined in the task.</p>
<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">protected</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">GenerateCommandLineCommands</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="p">();</span>
    <span class="nf">AppendIfPresent</span><span class="p">(</span><span class="n">builder</span><span class="p">,</span> <span class="s">"--target"</span><span class="p">,</span> <span class="n">Target</span><span class="p">);</span>
    <span class="nf">AppendIfPresent</span><span class="p">(</span><span class="n">builder</span><span class="p">,</span> <span class="s">"--target-work-dir"</span><span class="p">,</span> <span class="n">WorkingDirectory</span><span class="p">);</span>
    <span class="nf">AppendIfPresent</span><span class="p">(</span><span class="n">builder</span><span class="p">,</span> <span class="s">"--target-args"</span><span class="p">,</span> <span class="nf">QuoteIfNeeded</span><span class="p">(</span><span class="n">TargetArgs</span><span class="p">));</span>
    <span class="nf">AppendIfPresent</span><span class="p">(</span><span class="n">builder</span><span class="p">,</span> <span class="s">"--output"</span><span class="p">,</span> <span class="n">Output</span><span class="p">);</span>
    <span class="nf">AppendMultipleItemsTo</span><span class="p">(</span><span class="n">builder</span><span class="p">,</span> <span class="s">"--include"</span><span class="p">,</span> <span class="n">Include</span><span class="p">);</span>
    <span class="nf">AppendMultipleItemsTo</span><span class="p">(</span><span class="n">builder</span><span class="p">,</span> <span class="s">"--exclude"</span><span class="p">,</span> <span class="n">Exclude</span><span class="p">);</span>
    <span class="n">Log</span><span class="p">.</span><span class="nf">LogCommandLine</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
    <span class="k">return</span> <span class="n">builder</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure></p>
<h5>5. Execute</h5>
Finally, if you have anything special to do, you can override the <em>Execute()</em>. In this case, I wanted to handle the registering and de-registering of the Core.dll. Make sure that you call the <em>base.Execute()</em> method so that the TaskTarget can do the work that it needs to do.</p>
<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Execute</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="n">corDriverPath</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="nf">Combine</span><span class="p">(</span><span class="n">ToolPath</span><span class="p">,</span> <span class="n">CorDriverName</span><span class="p">);</span>
    <span class="n">Log</span><span class="p">.</span><span class="nf">LogMessage</span><span class="p">(</span><span class="s">"CoreDriver: {0}"</span><span class="p">,</span> <span class="n">corDriverPath</span><span class="p">);</span>
    <span class="k">using</span> <span class="p">(</span><span class="n">Registrar</span> <span class="n">registrar</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Registrar</span><span class="p">(</span><span class="n">corDriverPath</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">registrar</span><span class="p">.</span><span class="nf">RegisterComDLL</span><span class="p">();</span>
        <span class="k">return</span> <span class="k">base</span><span class="p">.</span><span class="nf">Execute</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure></p>
<p>To see the whole thing, download the files at the bottom of this post.</p>
<h3>How to Use PartCover with MSBuild</h3>
Now that you have a Custom task you need to create a Target in your MSBuild file to execute the task.</p>
<p><figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;/p&gt;</span>
<span class="c">&lt;!-- Register the PartCover.MSBuild.dll so the PartCover task is available --&gt;</span>
<span class="nt">&lt;UsingTask</span> <span class="na">TaskName=</span><span class="s">"PartCover.MSBuild.PartCover"</span> <span class="na">AssemblyFile=</span><span class="s">"$(LibDirectory)/PartCover/PartCover.MSBuild.dll"</span> <span class="nt">/&gt;</span>
<span class="c">&lt;!-- Setup a property so you can use it in your task --&gt;</span>
<span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;TestAssemblies</span> <span class="na">Include=</span><span class="s">"src/ZorchedProj/bin/$(Configuration)/ZorchedProj.Tests.dll"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/ItemGroup&gt;</span>
<span class="c">&lt;!-- Create a Target to call the PartCover task --&gt;</span>
<span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">"Test"</span> <span class="na">DependsOnTargets=</span><span class="s">"CoreBuild"</span><span class="nt">&gt;</span>
     <span class="c">&lt;!-- Configure the task to execute --&gt;</span>
    <span class="nt">&lt;PartCover</span> <span class="na">ToolPath=</span><span class="s">"$(LibDirectory)/PartCover"</span>
        <span class="na">Target=</span><span class="s">"$(LibDirectory)NUnitnunit-console.exe"</span>
        <span class="na">TargetArgs=</span><span class="s">"%(TestAssemblies.FullPath) /xml=%(TestAssemblies.Filename).xml /labels /nologo /noshadow"</span>
        <span class="na">WorkingDirectory=</span><span class="s">"$(MSBuildProjectDirectory)"</span>
        <span class="na">Output=</span><span class="s">"partcover.xml"</span>
        <span class="na">Include=</span><span class="s">"[Zorched.*]*"</span>
        <span class="na">Exclude=</span><span class="s">"[*.Test]*"</span>
    <span class="nt">/&gt;</span>
<span class="nt">&lt;/Target&gt;</span></code></pre></figure></p>
<p><strong>Download the code:</strong>
<a href='http://www.zorched.net/wp-content/uploads/2009/01/partcovermsbuild.zip'>PartCover MSbuild.zip</a></p>
<p>Good luck and I hope someone else finds this useful.</p>
