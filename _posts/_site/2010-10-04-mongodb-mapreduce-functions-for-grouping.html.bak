<p>SQL GROUP BY allows you to perform aggregate functions on data sets; To count all of the stores in each state, to average a series of related numbers, etc. MongoDB has <a href="http://www.mongodb.org/display/DOCS/Aggregation">some aggregate functions</a> but they are fairly limited in scope. The MongoDB group function also suffers from the fact that it does not work on <a href="http://en.wikipedia.org/wiki/Shard_(database_architecture)">sharded</a> configurations. So how do you perform grouped queries using MongoDB? By using MapReduce functions of course (you read the title right?)</p>
<h3>Understanding MapReduce</h3>
Understanding MapReduce requires, or at least is made much easier by, understanding functional programming concepts. <em>map</em> and <em>reduce (fold, inject)</em> are functions that come from Lisp and have been inherited by a lot of languages (Scheme, Smalltalk, Ruby, Python).</p>
<dl>
<dt>map</dt>
<dd>A higher-order function which transforms a list by applying a function to each of its elements. Its return value is the transformed list. In MongoDB terms, the map is a function that is run for each Document in a collection and can return a value for that row to be included in the transformed list.</dd></p>
<dt>reduce</dt>
<dd>A higher-order function that iterates an arbitrary function over a data structure and builds up a return value. The reduce function takes the values returned by map and allows you to run a function to manipulate those values in some way.</dd>
</dl></p>
<h3>Some Examples</h3>
Let's start with some sample data:
<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">db</span><span class="p">.</span><span class="nx">factories</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Miller"</span><span class="p">,</span> <span class="na">metro</span><span class="p">:</span> <span class="p">{</span> <span class="na">city</span><span class="p">:</span> <span class="s2">"Milwaukee"</span><span class="p">,</span> <span class="na">state</span><span class="p">:</span> <span class="s2">"WI"</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
<span class="nx">db</span><span class="p">.</span><span class="nx">factories</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Lakefront"</span><span class="p">,</span> <span class="na">metro</span><span class="p">:</span> <span class="p">{</span> <span class="na">city</span><span class="p">:</span> <span class="s2">"Milwaukee"</span><span class="p">,</span> <span class="na">state</span><span class="p">:</span> <span class="s2">"WI"</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
<span class="nx">db</span><span class="p">.</span><span class="nx">factories</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Point"</span><span class="p">,</span> <span class="na">metro</span><span class="p">:</span> <span class="p">{</span> <span class="na">city</span><span class="p">:</span> <span class="s2">"Steven's Point"</span><span class="p">,</span> <span class="na">state</span><span class="p">:</span> <span class="s2">"WI"</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
<span class="nx">db</span><span class="p">.</span><span class="nx">factories</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Pabst"</span><span class="p">,</span> <span class="na">metro</span><span class="p">:</span> <span class="p">{</span> <span class="na">city</span><span class="p">:</span> <span class="s2">"Milwaukee"</span><span class="p">,</span> <span class="na">state</span><span class="p">:</span> <span class="s2">"WI"</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
<span class="nx">db</span><span class="p">.</span><span class="nx">factories</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Blatz"</span><span class="p">,</span> <span class="na">metro</span><span class="p">:</span> <span class="p">{</span> <span class="na">city</span><span class="p">:</span> <span class="s2">"Milwaukee"</span><span class="p">,</span> <span class="na">state</span><span class="p">:</span> <span class="s2">"WI"</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
<span class="nx">db</span><span class="p">.</span><span class="nx">factories</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Coors"</span><span class="p">,</span> <span class="na">metro</span><span class="p">:</span> <span class="p">{</span> <span class="na">city</span><span class="p">:</span> <span class="s2">"Golden Springs"</span><span class="p">,</span> <span class="na">state</span><span class="p">:</span> <span class="s2">"CO"</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
<span class="nx">db</span><span class="p">.</span><span class="nx">factories</span><span class="p">.</span><span class="nx">find</span><span class="p">()</span></code></pre></figure></p>
<p>Lets say I want to count the number of factories in each of the cities (ignore the fact that I could have the same city in more than one state, I don't in my data). For a count, I write a function that "emits" the group by key and a value that you can count. It can be any value, but for simplicity I'll make it 1. <em>emit()</em> is a MongoDB server-side function that you use to identify a value in a row that should be added to the transformed list. If <em>emit()</em> is not called then the values for that row will be excluded from the results.
<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">mapCity</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">emit</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">metro</span><span class="p">.</span><span class="nx">city</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>
<p>The next piece is the <em>reduce()</em> function. The reduce function will be passed a key and an array of values that were collected by the <em>map()</em> function. I know my map function returns a 1 for each row keyed by city. So the reduce function will be called with a key "Golden Springs" and a single-element array containing a 1. For "Milwaukee" it will be passed an 4-element array of 1s.
<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">reduceCount</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">vals</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">vals</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">vals</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure></p>
<p>With those 2 functions I can call the mapReduce function to perform my Query.
<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">res</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">factories</span><span class="p">.</span><span class="nx">mapReduce</span><span class="p">(</span><span class="nx">mapCity</span><span class="p">,</span> <span class="nx">reduceCount</span><span class="p">)</span>
<span class="nx">db</span><span class="p">[</span><span class="nx">res</span><span class="p">.</span><span class="nx">result</span><span class="p">].</span><span class="nx">find</span><span class="p">()</span></code></pre></figure></p>
<p>This results in:
<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">{</span> <span class="s2">"_id"</span> <span class="err">:</span> <span class="s2">"Golden Springs"</span><span class="p">,</span> <span class="s2">"value"</span> <span class="err">:</span> <span class="mi">1</span> <span class="p">}</span>
<span class="p">{</span> <span class="s2">"_id"</span> <span class="err">:</span> <span class="s2">"Milwaukee"</span><span class="p">,</span> <span class="s2">"value"</span> <span class="err">:</span> <span class="mi">4</span> <span class="p">}</span>
<span class="p">{</span> <span class="s2">"_id"</span> <span class="err">:</span> <span class="s2">"Steven's Point"</span><span class="p">,</span> <span class="s2">"value"</span> <span class="err">:</span> <span class="mi">1</span> <span class="p">}</span></code></pre></figure></p>
<p>Counting is not the only thing I can do of course. Anything can be returned by the map function including complex JSON objects. In this example I combine the names of all of the Factories in a given City into a simple comma-separated list.
<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">mapCity</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">emit</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">metro</span><span class="p">.</span><span class="nx">city</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">reduceNames</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">vals</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">vals</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">","</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">res</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">factories</span><span class="p">.</span><span class="nx">mapReduce</span><span class="p">(</span><span class="nx">mapCity</span><span class="p">,</span> <span class="nx">reduceNames</span><span class="p">)</span>
<span class="nx">db</span><span class="p">[</span><span class="nx">res</span><span class="p">.</span><span class="nx">result</span><span class="p">].</span><span class="nx">find</span><span class="p">()</span></code></pre></figure></p>
<p>Give you:
<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">{</span> <span class="s2">"_id"</span> <span class="err">:</span> <span class="s2">"Golden Springs"</span><span class="p">,</span> <span class="s2">"value"</span> <span class="err">:</span> <span class="s2">"Coors"</span> <span class="p">}</span>
<span class="p">{</span> <span class="s2">"_id"</span> <span class="err">:</span> <span class="s2">"Milwaukee"</span><span class="p">,</span> <span class="s2">"value"</span> <span class="err">:</span> <span class="s2">"Miller,Lakefront,Pabst,Blatz"</span> <span class="p">}</span>
<span class="p">{</span> <span class="s2">"_id"</span> <span class="err">:</span> <span class="s2">"Steven's Point"</span><span class="p">,</span> <span class="s2">"value"</span> <span class="err">:</span> <span class="s2">"Point"</span> <span class="p">}</span></code></pre></figure></p>
<h3>Conclusion</h3>
These are fairly simple examples, but I think it helps to work through this kind of simple thing to fully understand a new technique before you have to work with harder examples.</p>
<p>For more on MongoDB check out these books:</p>
<ul>
<li>
<a href="http://www.amazon.com/gp/product/1449381561?ie=UTF8&tag=zorchednet-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1449381561">MongoDB: The Definitive Guide</a><img src="http://www.assoc-amazon.com/e/ir?t=zorchednet-20&l=as2&o=1&a=1449381561" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</li></p>
<li>
<a href="http://www.amazon.com/gp/product/1430230517?ie=UTF8&tag=zorchednet-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1430230517">The Definitive Guide to MongoDB: The NoSQL Database for Cloud and Desktop Computing</a><img src="http://www.assoc-amazon.com/e/ir?t=zorchednet-20&l=as2&o=1&a=1430230517" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</li></p>
<li>
<a href="http://www.amazon.com/gp/product/0321705335?ie=UTF8&tag=zorchednet-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321705335">MongoDB for Web Development (Developer's Library)</a><img src="http://www.assoc-amazon.com/e/ir?t=zorchednet-20&l=as2&o=1&a=0321705335" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</li></p>
<li>
<a href="http://www.amazon.com/gp/product/0262062186?ie=UTF8&tag=zorchednet-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0262062186">How to Design Programs: An Introduction to Programming and Computing</a><img src="http://www.assoc-amazon.com/e/ir?t=zorchednet-20&l=as2&o=1&a=0262062186" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> - If you want to learn more about functional programming I highly recommend this book.
</li>
</ul></p>
